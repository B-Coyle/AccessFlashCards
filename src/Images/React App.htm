<!DOCTYPE html>
<!-- saved from url=(0022)http://localhost:3000/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <link rel="shortcut icon" href="http://localhost:3000/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="theme-color" content="#000000">
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="http://localhost:3000/manifest.json">
    <!--
      Notice the use of  in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  <style type="text/css">.mainScreen {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr;
  grid-template-areas: "header header header" "prevBtn card nextBtn" "footer footer footer";
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100vh; }

.cardContainer {
  grid-area: card; }

.buttonContainer {
  grid-area: prevBtn nextBtn; }

.header {
  grid-area: header; }

.footerContainer {
  grid-area: footer; }

.quizCard {
  border: 5px green solid;
  width: 50%;
  color: #fff;
  background: rgba(158, 255, 186, 0.6); }

.localStgContainer {
  margin: 20px 0;
  text-decoration: underline;
  border-top: 5px green solid;
  border-bottom: 5px green solid; }

* {
  box-sizing: border-box; }

body {
  display: block;
  margin: 0;
  padding: 0;
  font-size: 1em;
  font-family: 'Lora', serif;
  font-weight: 400;
  background-image: url(/static/media/background.a1cca2cd.jpeg);
  background-size: cover;
  background-repeat: no-repeat;
  background-attachment: fixed;
  width: 100%;
  height: 100%; }
</style><style type="text/css">.mainScreen {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr;
  grid-template-areas: "header header header" "prevBtn card nextBtn" "footer footer footer";
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100vh; }

.cardContainer {
  grid-area: card; }

.buttonContainer {
  grid-area: prevBtn nextBtn; }

.header {
  grid-area: header; }

.footerContainer {
  grid-area: footer; }
</style><style type="text/css">.quizCard {
  border: 5px green solid;
  width: 50%;
  color: #fff;
  background: rgba(158, 255, 186, 0.6); }

.localStgContainer {
  margin: 20px 0;
  text-decoration: underline;
  border-top: 5px green solid;
  border-bottom: 5px green solid; }
</style><style type="text/css"></style><style type="text/css">.footerContainer {
  color: black;
  border: 5px green solid;
  background-color: rgba(240, 255, 173, 0.5);
  width: 55%;
  height: 250px; }
</style><style type="text/css">.header {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-areas: "reset title shuffle"; }

.appTitle {
  grid-area: title;
  font-size: 90px;
  text-align: center;
  color: #fff;
  text-decoration: underline; }

.resetContainer {
  grid-area: reset;
  display: inline;
  text-align: center; }

.shuffleContainer {
  grid-area: shuffle;
  display: inline;
  text-align: center; }
</style></head>
  <body class="vsc-initialized">
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"><section class="mainScreen"><header class="header"><h1 class="appTitle">Aria Garden</h1><div class="resetContainer"><input type="button" value="Reset Game from Start"></div><div class="shuffleContainer"><input type="button" value="Shuffle Cards"></div></header><article><input type="button" class="startBtn" value="Start Studying"></article><article class="footerContainer"><h3>Want to know more?</h3><h4>Resources on Web Accessibility and ARIA</h4><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques#Roles">Using ARIA: Roles, States, and Properties</a></li><li><a href="https://www.mcdpartners.com/news/top-5-common-web-accessibility-mistakes/">Top 5 Most Common Web Accessibility Mistakes</a></li><li><a href="https://en.wikipedia.org/wiki/Web_accessibility">Web Accessibility-Wikipedia</a></li><li><a href="https://www.w3.org/WAI/standards-guidelines/wcag/">Web Content Accessibility Guidelines (WCAG) Overview</a></li></ul></article></section></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  <script src="./React App_files/bundle.js"></script><script src="./React App_files/0.chunk.js"></script><script src="./React App_files/main.chunk.js"></script>

</body></html>